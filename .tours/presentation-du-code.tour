{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "Presentation du code en 30 étapes",
  "steps": [
    {
      "title": "Introduction",
      "description": "Voici une présentation du code de l'application de réseau social pour l'entreprise Groupomania\n"
    },
    {
      "file": "Frontend/cli-version/.eslintrc.js",
      "line": 1,
      "description": "ESLint est un outil linting utility pour le JavaScript.\n\nPar cela on entend un outil qui analyse un code pour trouver les potentielles erreurs pouvant introduire des bug",
      "title": "Module eslint"
    },
    {
      "file": "Frontend/cli-version/src/main.js",
      "line": 2,
      "description": "le main.js est le fichier “racine” de l’application. C’est lui qui va faire le lien entre la vue et le modèle",
      "title": "Main.js Racine de l'application"
    },
    {
      "file": "Frontend/cli-version/src/main.js",
      "line": 8,
      "description": "Axios est une bibliothèque JavaScript fonctionnant comme un client HTTP.\nElle permet de communiquer avec des API en utilisant des requêtes.\nComme avec les autres clients HTTP, il est possible de créer des requêtes avec la méthode POST.",
      "title": "Communication avec l'API"
    },
    {
      "file": "Frontend/cli-version/src/App.vue",
      "description": "App.vue est le fichier principal du Front qui englobe tous les composants de l’application qui permettent respectivement de mettre du code HTML, le code JavaScript et le code CSS\n",
      "title": "App.vue Fichier principal du front",
      "line": 1
    },
    {
      "file": "Frontend/cli-version/src/router/index.js",
      "line": 2,
      "description": "L'index.js du router nous permet de configurer les routes vers les différents fichiers ",
      "title": "index.js config des routes"
    },
    {
      "file": "Backend/server.js",
      "line": 1,
      "description": "Les modules mis en place pour l'écoute des requetes http et la reponse.\nQuand le site sera en ligne il faudra gérer un certificat SSL afin d'obtenir la sécurité du https.",
      "title": "Modules de sécurité Http/https"
    },
    {
      "file": "Backend/server.js",
      "line": 4,
      "description": "La fonction Normalize renvoie un port valide, qu'il soit fourni sous la forme d'un numéro ou d'une chaîne.\nCela configure le port de connection en fonction de l'environnement",
      "title": "Port valide"
    },
    {
      "file": "Backend/server.js",
      "line": 15,
      "description": "On définit un port valide.\nAjout du port de connection si celui-ci n'est pas declarer par l'environnement.\nSi aucun port n'est fourni on écoutera sur le port 3000.",
      "title": "Definition du port"
    },
    {
      "file": "Backend/server.js",
      "line": 18,
      "description": "La fonction errorHandler recherche les différentes erreurs et les gère de manière appropriée pour enregistrée dans le serveur.",
      "title": "Gestion des erreurs serveur"
    },
    {
      "file": "Backend/server.js",
      "line": 38,
      "description": "Créer un serveur avec express qui utilise app\nCréation d'une constante pour les appels serveur (requetes et reponses)\nGestions des évenements serveur pour un retour console\nLance le serveur et affiche sur quel port se connecter ou gère les erreurs s'il y en a",
      "title": "Création d'un serveur avec express"
    },
    {
      "file": "Backend/models/index.js",
      "line": 5,
      "description": "Cette librairie permet de charger des variables d’environnement définies dans un fichier texte",
      "title": "librairie des variables d’environnement"
    },
    {
      "file": "Backend/models/index.js",
      "line": 8,
      "description": "Module pour récuperer les variables d'envirronement.\nConnexion à la base de donnée",
      "title": "Connexion à la bd"
    },
    {
      "file": "Backend/app.js",
      "line": 2,
      "description": "App.js fait appel aux différentes fonctions implémentées dans l'APi : Accès aux images, aux route User, aux route Sauce\n\nimport des modules npm - Ajout des plugins externes necessaires\nImportation d'express => Framework basé sur node.js\nBodyParser qui permet d'extraire l'objet JSON des requêtes POST\nOn donne accès au chemin de notre système de fichier\nPlugin qui sert dans l'upload des images et permet de travailler avec les répertoires et chemin de fichier",
      "title": "app.js Fichier principal du back"
    },
    {
      "file": "Backend/app.js",
      "line": 12,
      "description": "On importe la route dédiée aux utilisateurs, aux messages et aux commentaire",
      "title": "Importation des routes"
    },
    {
      "file": "Backend/app.js",
      "line": 14,
      "description": "Utilisation du module 'helmet' pour la sécurité en protégeant l'application de certaines vulnérabilités.\nIl sécurise nos requêtes HTTP, sécurise les en-têtes, contrôle la prélecture DNS du navigateur.\nIl empêche le détournement de clics et ajoute une protection XSS mineure et protège contre le reniflement de TYPE MIME, cross-site scripting, sniffing et clickjacking",
      "title": "Sécurité avec Helmet"
    },
    {
      "file": "Backend/app.js",
      "line": 15,
      "description": "Middleware Header pour contourner les erreurs en débloquant certains systèmes de sécurité CORS, afin que tout le monde puisse faire des requetes depuis son navigateur\n",
      "title": "Sécurité CORS"
    },
    {
      "file": "Backend/app.js",
      "line": 18,
      "description": "On utilise une méthode body-parser pour la transformation du corps de la requête en JSON, en objet JS utilisable\nSachant que l'on va créer une requête post pour permettre à l'utilisateur de mettre en ligne sur la base d'un schéma créer.\nil va falloir traiter les données associées à cette requête, autrement dit d'extraire l'objet JSON de la demande en provenance du frontend : on aura recours à body-parser.\nIl faut qu'elle soit soit formatée pour être utilisée",
      "title": "Mettre la requête en JSON"
    },
    {
      "file": "Backend/app.js",
      "line": 23,
      "description": "// Midleware qui permet de charger les fichiers qui sont dans le repertoire images et de les gerer de façon statiques.",
      "title": "Gestion des images"
    },
    {
      "file": "Backend/.env",
      "line": 8,
      "description": "Notre fichier .env qui sert à nous connecter à la base de donnée.\nEn principe ce fichier n'est pas dans le repo et doit etre crée par l'utilisateur.\nIl est juste là pour facilité l'accés au mentor pendant la soutenance.",
      "title": "Sécurité .env"
    },
    {
      "file": "Backend/routes/user.js",
      "line": 1,
      "description": "Dans \"routes\" le fichier user.js contient les fonctions qui s'appliquent aux différentes routes pour les utilisateurs\nOn installe Express pour créer un routeur\nPuis on associe les fonctions aux différentes routes et on importe le controlleur.\nEnsuite l'importation du Middlewares pour créer un token d'indentification.",
      "title": "Installation d'Express"
    },
    {
      "file": "Backend/routes/message.js",
      "line": 1,
      "description": "Dans le fichier message.js on ajoute le plugin externe nécessaire pour utiliser le router d'Express\nOn appel le routeur, on sécurise les routes avec le Middlewares \"auth\".\nEn exportant dans le controller la logique métier, les fonctions, on voit plus clairement quelles sont les routes dont on dispose, et on utilisera une sémantique très claire pour comprendre ce qu'elles permettent. On a quelque chose de plus modulaire plus facile à comprendre et plus facile à maintenir\n",
      "title": "Appel du routeur dans message"
    },
    {
      "file": "Backend/routes/message.js",
      "line": 12,
      "description": "On sécurise les routes et on gére les images avec multer.\nPuis on crée les routes de l'API.",
      "title": "Sécurisation des routes"
    },
    {
      "file": "Backend/middleware/multer-config.js",
      "line": 1,
      "description": "On importe multer qui est un package qui permet de gérer les fichiers entrants dans les requêtes HTTP",
      "title": "importation de multer"
    },
    {
      "file": "Backend/middleware/multer-config.js",
      "line": 2,
      "description": "On crée un dictionnaire des types MIME pour définire le format des images autorisées\nDonc la creation d'un objet pour ajouter une extention en fonction du type mime du ficher\nOn crée un objet de configuration pour préciser à multer où enregistrer les fichiers images et les renommer\nOn mets la destination d'enregistrement des images\nOn passe le dossier images qu'on a créé dans le backend\nOn dit à multer quel nom de fichier on utilise pour éviter les doublons\nOn génère un nouveau nom avec le nom d'origine, on supprime les espaces (white space avec split) et on insère des underscores à la place\nOn appelle le callback, on passe null pour dire qu'il n'y a pas d'erreur et on crée le filename en entier, on ajoute un timestamp, un point et enfin l'extension du fichier",
      "title": "Gestion Multimédia"
    },
    {
      "file": "Backend/middleware/auth.js",
      "line": 1,
      "description": "Voici le Middleware qui protégera les routes sélectionnées et vérifier que l'utilisateur est authentifié avant d'autoriser l'envoi de ses requêtes.\nOn vérifie le TOKEN de l'utilisateur, s'il correspond à l'id de l'utilisateur dans la requête, il sera autorisé à changer les données correspondantes.\nLe middleware AUTH sera appliqué à toutes les routes afin de les sécuriser - Vérification de l'utilisateur",
      "title": "Sécurité d'authentification"
    },
    {
      "file": "Backend/controllers/auth.js",
      "line": 7,
      "description": "Déclaration du role d'administrateur\nLe premier utilisateur inscrit sur le site deviendra administrateur et pourra gerer tous les post. Pour le changer il faut passer par mysql avec une requete ou directement en bd.",
      "title": "Administrateur/Modérateur"
    },
    {
      "file": "Frontend/cli-version/src/components/Messages.vue",
      "line": 156,
      "description": "Permettre a l'admin de supprimer les post des user",
      "title": "Fonction d'administration"
    },
    {
      "file": "Backend/controllers/auth.js",
      "line": 36,
      "description": "Le Middlewares LOGIN permet de vérifier si l'utilisateur existe dans la base MySQL lors du login, si oui il vérifie son mot de passe,,s'il est bon il renvoie un TOKEN content l'id de l'utilisateur, sinon il renvoie une erreur.\nSi le mot de passe est correct, création du token de session avec code de salage protégé par token et expiration sur 24h\n        //Le serveur backend renvoie un token au frontend\n        //Encode un nouveau token avec une chaine de développement temporaire\n        //Encodage de l'userdID nécéssaire dans le cas où une requête transmettrait un userId (ex: modification d'un post)\n        // Clé d'encodage du token pouvant être rendue plus complexe en production\n",
      "title": "Vérification du login"
    },
    {
      "file": "Backend/controllers/message.js",
      "line": 2,
      "description": "Middlewares pour gérer les messages.",
      "title": "Gestion des post"
    }
  ],
  "isPrimary": true
}